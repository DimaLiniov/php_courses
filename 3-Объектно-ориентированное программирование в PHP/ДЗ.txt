Объектно-ориентированное программирование в PHP

1. Что такое ООП?

2. 3 кита ООП

3. Создание класса в PHP

Создайте класс Point (точка).
Добавьте в него 2 свойства: x и y (координаты).
Создайте объект класса Point.
Установите свойства x и y в значения 5 и 3 у объекта из 3-го пункта.
Выведите оба свойства объекта из 3-го пункта.

4. Конструктор, деструктор и методы

Добавьте в класс, созданный в предыдущем упражнении, конструктор, принимающий x и y.
Внутри конструктора присвойте полям значения, полученные в параметрах конструктора.
Напишите GET и SET методы.
Проверьте правильность их работы.
Примечание: Вы должны самостоятельно понять, как убедиться, что всё работает верно: какие методы надо выполнить и какие выводы в браузер сделать.

5. Модификаторы доступа

Сделайте в классе из предыдущего упражнения оба свойства – private.
Попытайтесь получить доступ к свойству напрямую. Изучите получившуюся ошибку.
Воспользуйтесь методами GET и SET, чтобы получить доступ к свойствам: сначала установив значения свойств x и y (с помощью методов SET), а после выведя получившиеся значения в браузер (с помощью методов GET).

6. Статические свойства и методы

Добавьте в класс Point (из предыдущего упражнения) статическое свойство counter, изначально равное 0.
Добавьте в конструктор инкремент этого статического свойства. По сути, это будет счётчик объектов.
Добавьте статический метод, возвращающий свойство counter.
Создайте 3 объекта и выведите с помощью метода из 3-го пункта значение counter. Убедитесь, что оно равно 3.

7. "Магические" методы

Добавьте в класс Point (из предыдущего упражнения) метод __toString() и реализуйте его, вернув строку такого вида: «Точка с координатами (x, y)». Безусловно, вместо x и y должны быть конкретные значения.
Создайте 3 разных объекта класса Point и выведите их через echo.
Реализуйте метод __get(), в котором при обращении к несуществующему свойству z будет выведено сообщение «Класс Point работает только в двумерном пространстве».
Аналогично сделайте метод __set() при попытке изменить свойств z.
Так же реализуйте метод call(), в котором выведите ту же строку, что и в пункте 3, при попытке вызвать метод setZ().
Создайте 1 объект класса Point и сделайте его клон. Убедитесь, что клонирование прошло успешно, попытавшись изменить свойство любого из объектов и выведя это свойство у обоих объектов. Они должны быть различны.

8. Сериализация объектов

Сделайте форму с двумя полями: x и y. Также добавьте кнопки: «Сохранить» и «Загрузить».
При вводе x и y и нажатии кнопки «Сохранить» должен быть создан объект класса Point, который необходимо сериализовать.
При нажатии кнопки «Загрузить» в поля x и y должны быть подставлены координаты сериализованного объекта.
Примечание: Обязательно выводите различные предупреждения. Например, при попытке «Загрузить» ещё не сохранённый объект или сохранить без заполненных или некорректных полей x и y. Также выводите информацию об успешном сохранении и об успешной загрузке.

9. Механизм наследования и абстрактные классы

Создайте абстрактный класс Shape с абстрактным методом draw().
Сделайте класс Point со свойствами x и y (оба public) наследующим класс Shape.
Попробуйте создать объект класса Point. Проанализируйте получившуюся ошибку.
Реализуйте метод draw() в классе Point, выведя в нём строку: «Рисуем точку с координатами (x, y)». Разумеется, вместо x и y должны быть конкретные значения.
Вызовите метод draw() у объекта класса Point и убедитесь, что всё работает правильно.

10. Интерфейсы

Создайте интерфейс СanMove с методом move().
Создайте интерфейс СanFly с методом fly().
Создайте класс Car с реализацией интерфейса CanMove, где в методе move() будет выводиться строка «Движение автомобиля».
Создайте класс Aircraft с реализацией интерфейса CanFly, где в методе fly() будет выводиться строка «Полёт самолёта».
Создайте объект класса Car и вызовите метод move().
Создайте объект класса Aircraft и вызовите метод fly().

11. Трейты

Перепишите предыдущее упражнение, только вместо интерфейсов должны быть трейты и прямо в них должна быть реализация методов move() и fly().
В классах Car и Aircraft подключите трейты, удалив при этом реализацию методов move() и fly() (поскольку теперь реализация находится в самих трейтах).
Создайте объект класса Car и вызовите метод move().
Создайте объект класса Aircraft и вызовите метод fly().

12. Пространство имён

В предыдущем упражнении поместите класс Car, Aircraft, а также трейты CanMove и CanFly в отдельные файлы.
Добавьте пространство имён в каждый класс и каждый трейт.
В index.php подключите эти классы.
Создайте объект класса Car и вызовите метод move().
Создайте объект класса Aircraft и вызовите метод fly().
Примечание: Для использования классов Вы можете использовать как use, так и писать полный путь. Также можно комбинировать эти способы.

13. Импортирование и автозагрузка классов

Переименуйте файлы из предыдущего упражнения в соответствии с названиями классов. Например, файл класса Car должен называться «Car.php», файл трейта CanMove должен называться «CanMove» и так далее.
Поместите все эти файлы в папку lib.
Настройте автозагрузку классов.
Уберите все require_once (и его аналоги) во всех файлах.
Убедитесь, что всё по-прежнему работает.